#!/bin/bash
# Show GCC compiler option switches used to compile a given ELF object.
# Limitation: works only for ELF objects compiled with debug info, -g
# Can also show a detailed GCC report + GCC optimization flags that enabled/disabled.
# (c) Kaiwan N Billimoria
# MIT

# Turn on unofficial Bash 'strict mode'! V useful
# "Convert many kinds of hidden, intermittent, or subtle bugs into immediate, glaringly obvious errors"
# ref: http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

name=$(basename $0)

die()
{
echo >&2 "$@"
exit 1
}
usage()
{
echo "Usage: ${name} [-<option>] binary-ELF-object-compiled-with-debug-opt-g
  <option> can be:
   -g  :  show generic default GCC option switches used
   -o  :  show generic default GCC optimization switches (enabled and disabled)
   -h  :  show this help screen
The binary ELF object passed can be a binary executable, an object file, a kernel module, even a kernel image.
LIMITATION: It MUST be compiled with debugging enabled, i.e., with -g"
}

show_gcc_def_options()
{
local LOG=$1
[[ $# -eq 0 ]] && LOG=${REPORT_GCC_DEF_OPTIONS}

cat > .hello.c <<@EOF@
#include <stdio.h>
#include <unistd.h>
int main()
{
	printf("Hello, world\n");
}
@EOF@
gcc .hello.c >/dev/null 2>&1 || die "gcc failed"
gcc -Q -v .hello.c 2> ${LOG}
rm -f .hello.c a.out
echo "
GCC : generic: default options report written to: ${LOG}"
}

show_gcc_def_optimization_options()
{
local LOG=$1
[[ $# -eq 0 ]] && LOG=${REPORT_GCC_DEF_OPTIMIZATIONS}

local num_opt_en=$(gcc -Q --help=optimizers |grep " \-f.*\[enabled\]$"|wc -l)
echo "GCC : generic: all enabled optimizations (${num_opt_en})"
[[ ${num_opt_en} -gt 0 ]] && {
 gcc -Q --help=optimizers |grep " \-f.*\[enabled\]$" > ${LOG}
}
local num_opt_dis=$(gcc -Q --help=optimizers |grep " \-f.*\[disabled\]$"|wc -l)
echo "GCC : generic: all disabled optimizations (${num_opt_dis})"
[[ ${num_opt_dis} -gt 0 ]] && {
 gcc -Q --help=optimizers |grep " \-f.*\[disabled\]$" >> ${LOG}
}
echo "GCC : generic: default optimization options report written to: ${LOG}"
}

show_gcc_option_switches()
{
[[ $# -ne 1 ]] && return
set +e
file $1 |grep -w "ELF" >/dev/null
[[ $? -ne 0 ]] && {
	echo "${name}: file $1 appears to not be an ELF object? Aborting..."
	exit 1
}
file $1 |grep "with debug_info" >/dev/null
[[ $? -ne 0 ]] && {
	echo "${name}: binary $1 appears to not be built with debug info? Aborting..."
	exit 1
}
set -e
#GCC_VER=$(gcc -v 2>&1 |tail -n1 |awk '{print $3}')
echo "$1:"
# On embedded, readelf can spit out errors + a lot of matches to 'producer' + many repititions;
# also, the gcc ver doesn't seem to match here.
# So trim the o/p and 'unique' it (eliminate dups) via sort -u !
readelf --debug-dump $1 2>/dev/null |grep producer |sed -n "s/.*GNU //p" |sort -u
##-- CAREFUL!  we have to match this -------------------------->^^^^^<--------------

#readelf --debug-dump $1 2>/dev/null |grep producer |grep "${GCC_VER}" |sed -n "s/.*${GCC_VER} //p" |sort -u
#readelf --debug-dump $1 |grep producer |sed -n "s/.*${GCC_VER} //p"
}


#--- 'main'
[[ $# -ne 1 ]] && {
set +u
ELF_FILE=$1
set -u
  usage
  exit 1
}
show_gcc_option_switches $1

#---------------------
# Other interesting things!
#---------------------
# Get GCC default options:
# gcc -Q -v filename.c
#---------------------
# Show all optimizations option switches (-f<foo>):
# gcc -Q --help=optimizers
#---------------------

SHOW_GCC_DEF_OPTIONS=0
REPORT_GCC_DEF_OPTIONS=report_gcc_def_options.txt
[[ ${SHOW_GCC_DEF_OPTIONS} -eq 1 ]] && show_gcc_def_options ${REPORT_GCC_DEF_OPTIONS} || \
	echo "
show GCC default options : skipped"

SHOW_GCC_DEF_OPTIMIZATION_OPTIONS=0
REPORT_GCC_DEF_OPTIMIZATIONS=report_gcc_def_optimizations.txt
[[ ${SHOW_GCC_DEF_OPTIMIZATION_OPTIONS} -eq 1 ]] && show_gcc_def_optimization_options ${REPORT_GCC_DEF_OPTIMIZATIONS} || \
	echo "show GCC default optimization options : skipped"

exit 0
