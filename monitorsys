#!/bin/bash
# monitorsys
#
# Part of the usefulsnips GitHub repo.
# https://github.com/kaiwan/usefulsnips
#
# Simple script to setup & run various 'monitor' programs in terminal windows.
# Update: added vmstat [20Oct2017]
#
# Author: Kaiwan NB
# (c) Kaiwan NB, kaiwanTECH
# MIT License.
#
# Ref:
# http://kaiwantech.wordpress.com/2014/01/06/simple-system-monitoring-for-a-linux-desktop/
name=$(basename $0)

usage()
{
  echo "Usage: ${name} [0|1]
 0 => run in CLI mode
 1 => run in GUI mode.

[Explanation for Geeks:
- In CLI (command line / console) mode, one only gets to see the output of dstat
(still quite useful); this is as there's only one terminal window available.
- In GUI mode (when running on X/Wayland), one will see the output of the foll utils
 (depends on which you select):
  iotop
  dstat
  dstat [plain]
  iftop
 in separate (pseudo)terminal windows!
]
 "
}

showpids()
{
echo "PIDs
iotop ${pid_iotop}
dtop ${pid_dtop}
dstat ${pid_dstat}
vmstat ${pid_vmstat}
iftop ${pid_iftop}
"
}


#--- 'main'
### check command/utility dependencies
needinstall=0
for util in vmstat dstat iotop iftop lxterminal zenity
do
    which ${util} > /dev/null 2>&1 || {
        [ ${needinstall} -eq 0 ] && echo "[!] ${name}: missing utilit[y|ies]:"
        echo " ${util}"
        needinstall=1
        continue
   }
done
[ ${needinstall} -eq 1 ] && {
  echo "ERROR! missing one or more utils (see above) in \$PATH. ${name} needs" \
    "to use these command(s). Pl install and retry, exiting."
  exit 1
}

#--- Verify this is the only running instance
ps -C ${name} -o pid= > /tmp/$$
num=$(cat /tmp/$$ |wc -l)
[ ${num} -gt 1 ] && {
  echo "ERR: Another instance of \"${name}\" appears to be currently running ... 
Terminate it and retry. Aborting."
  rm -f /tmp/$$
  exit 1
}

#--- If !root, re-exec it via sudo(8)
if [ $(id -u) -ne 0 ]; then
	#--- Get current script's pathname
	pid=$(cat /tmp/$$)
	[ -z "${pid}" ] && {
	  echo "ERR: couldn't fetch this instance's PID, aborting"
	  rm -f /tmp/$$
	  exit 1
	}
	pathnm=$(ps -p ${pid} -o command= |awk '{print $2}')
	#echo "name=${name} pathnm=${pathnm}"
	echo "${name}: need root, invoking script via sudo now ..."
	exec sudo ${pathnm}
fi

# CLI or GUI mode?
CLI_MODE=0
xdpyinfo >/dev/null 2>&1 || CLI_MODE=1
# On FC 26, xdpyinfo fails when run as root; so lets do another check as well
ps -e|egrep -w "X|Xorg|Xwayland" >/dev/null 2>&1 && CLI_MODE=0 || CLI_MODE=1
# if user insists, force CLI mode
[ $# -eq 1 ] && {
  [ $1 -eq 0 ] && CLI_MODE=1
}

if [ ${CLI_MODE} -eq 1 ] ; then     #------------- CLI Mode
  echo "[${name}: GUI display unavailable, defaulting to CLI mode...]"
  dstat --time --top-io-adv --top-cpu --top-mem 5
  exit 0
fi

#----------------- GUI Mode

# TODO - replace zenity w/ yad
#     - zenity on FC26 issue??
choices=$(zenity --title="kaiwanTECH : Simple Linux Monitoring" --list --text="Select any/all appropriate options" \
		--checklist \
		--column="Select" --column="Monitoring Software" \
		--width=400 --height=300 \
		"1" "iotop" \
		"2" "dtop" \
		"3" "dstat" \
		"4" "vmstat" \
		"5" "iftop" 2>/dev/null)
echo "${choices}"

# wayland: allow root to run gui apps too!
xhost si:localuser:root

# iotop
echo "${choices}" | grep -w iotop >/dev/null 2>&1
[ $? -eq 0 ] && lxterminal --working-directory=${HOME}/ --command="iotop" --title="IOTOP" --geometry=90x10 &
export pid_iotop=$(ps -C iotop -o pid=)

# dtop
echo "${choices}" | grep -w dtop >/dev/null 2>&1
[ $? -eq 0 ] && lxterminal --working-directory=${HOME}/ --command="dstat --time --top-io-adv --top-cpu --top-mem 5" --title="DTOP" --geometry=110x10 &
export pid_dtop=$(ps -C dstat -o pid=|head -n1)

# dstat
echo "${choices}" | grep -w dstat >/dev/null 2>&1
[ $? -eq 0 ] && lxterminal --working-directory=${HOME}/ --command="dstat" --title="DSTAT" --geometry=90x10 &
export pid_dstat=$(ps -C dstat -o pid=|tail -n1)

# vmstat {delaysec}
DELAYSEC=3
echo "${choices}" | grep -w vmstat >/dev/null 2>&1
[ $? -eq 0 ] && lxterminal --working-directory=${HOME}/ --command="vmstat ${DELAYSEC}" --title="VMSTAT" --geometry=120x10 &
export pid_vmstat=$(ps -C vmstat -o pid=)

# iftop
echo "${choices}" | grep -w iftop >/dev/null 2>&1
[ $? -eq 0 ] && {
   netif=$(route | grep '^default' | grep -o '[^ ]*$')
   intf=$(zenity --title="Specify net interface" --entry --text="Pl specify Network interface to monitor:" --entry-text="${netif}" 2>/dev/null)
   # show port as well (-P)
   [ ! -z ${intf} ] && lxterminal --working-directory=${HOME}/ --command="iftop -P -i ${intf}" --title="IFTOP ${intf}" --geometry=85x15 &
   export pid_iftop=$(ps -C iftop -o pid=)
}

sleep 2
showpids
